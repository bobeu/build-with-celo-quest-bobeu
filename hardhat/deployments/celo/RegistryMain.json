{
  "address": "0x70EF9503DB13ea94f001476B6d8491784348F8aF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_supportedAssets",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_categories",
          "type": "uint8[]"
        },
        {
          "internalType": "address",
          "name": "_cUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AssetTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "InvalidAssetId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStoreId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermitted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenBalanceInStoreTooLow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ItemAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ItemRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceLimit",
          "type": "uint256"
        }
      ],
      "name": "addItemToStoreFront",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "storeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerPrice",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createXWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "storeId",
          "type": "uint256"
        },
        {
          "internalType": "uint224",
          "name": "newPriceLimit",
          "type": "uint224"
        }
      ],
      "name": "editPriceLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "editSupportAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "priceLimit",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum IRegistry.Category",
                      "name": "category",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IRegistry.AssetMetadata",
                  "name": "metadata",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "quantity",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "assetId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "storeId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IRegistry.StoreInfo",
                  "name": "info",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IRegistry.StoreData[]",
              "name": "stores",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "assetId",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isVerified",
                  "type": "bool"
                },
                {
                  "internalType": "enum IRegistry.Category",
                  "name": "category",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IRegistry.SupportedAsset[]",
              "name": "supportedAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "xWallet",
                  "type": "address"
                }
              ],
              "internalType": "struct IRegistry.Wallet[]",
              "name": "xWallets",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IRegistry.Storage",
          "name": "stg",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "setSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "unSupportAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47ab2a71218310cd7500b30804004d60fa1d40bf0517eb455b5492def5d4eb6e",
  "receipt": {
    "to": null,
    "from": "0xC0f6Ef6C8A58fB431015D4D2d7e0925718EaC010",
    "contractAddress": "0x70EF9503DB13ea94f001476B6d8491784348F8aF",
    "transactionIndex": 13,
    "gasUsed": "2836821",
    "logsBloom": "0x
    "blockHash": "0xf65ca751babe97e8f28e8a05101189d7d8572bab4d34a084667b2280cc773731",
    "transactionHash": "0x47ab2a71218310cd7500b30804004d60fa1d40bf0517eb455b5492def5d4eb6e",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 25905636,
        "transactionHash": "0x47ab2a71218310cd7500b30804004d60fa1d40bf0517eb455b5492def5d4eb6e",
        "address": "0x70EF9503DB13ea94f001476B6d8491784348F8aF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c0f6ef6c8a58fb431015d4d2d7e0925718eac010"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0xf65ca751babe97e8f28e8a05101189d7d8572bab4d34a084667b2280cc773731"
      }
    ],
    "blockNumber": 25905636,
    "cumulativeGasUsed": "5721760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x409e23a02AC0e8eEa44B504B01fc6f672f624Fca",
      "0x7885F497c2b2b5096b92b70a31aEEb74070A4e69"
    ],
    [
      0,
      1
    ],
    "0x765DE816845861e75A25fCA122bb6898B8B1282a",
    "0xb06Ea95da3d0ADb0837d27EFA46cE10886004A46"
  ],
  "numDeployments": 1,
  "solcInputHash": "ad5f43d8805c1f5155ea7b243d19e56c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_supportedAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_categories\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"_cUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AssetTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"InvalidAssetId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStoreId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenBalanceInStoreTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceLimit\",\"type\":\"uint256\"}],\"name\":\"addItemToStoreFront\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"storeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createXWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"storeId\",\"type\":\"uint256\"},{\"internalType\":\"uint224\",\"name\":\"newPriceLimit\",\"type\":\"uint224\"}],\"name\":\"editPriceLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"editSupportAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum IRegistry.Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct IRegistry.AssetMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storeId\",\"type\":\"uint256\"}],\"internalType\":\"struct IRegistry.StoreInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct IRegistry.StoreData[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"enum IRegistry.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IRegistry.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xWallet\",\"type\":\"address\"}],\"internalType\":\"struct IRegistry.Wallet[]\",\"name\":\"xWallets\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRegistry.Storage\",\"name\":\"stg\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"setSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"unSupportAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addItemToStoreFront(uint256,uint256)\":{\"details\":\"Add item to storeFront\",\"params\":{\"assetId\":\": Identifier for the verified asset listed on the frontend. This should correspond to the id on the smart contract.\",\"priceLimit\":\": Lowest price at which trade should execute. Price should be denominated in cUSD using 18 decimals. Example: If the price for an item is 0.1cUSD, it should be written as 1e17 wei or equivalently 100000000000000000 otherwise, we will have a very inconsistent figures.  Note: Sellers are required to pay fees in CUSD as a prerequisite to adding asset to storeFront.       Seller should fund their onchain Wallet before making this call.       =========== THIS IS FUNCTION RESERVED TO BE IMPLEMENTED IN THE FUTURE==============\"}},\"buy(uint256,uint256,uint256)\":{\"details\":\"Buyer purchases token\",\"params\":{\"amount\":\": Quantity of token/coin to buy\",\"offerPrice\":\": Price they're willing to offer. Note: Price must be greater than minimum listed price.\",\"storeId\":\": Store Id\"}},\"createXWallet()\":{\"details\":\"Initializes a new xwallet\"},\"editPriceLimit(uint256,uint224)\":{\"details\":\"Only store owner function: Change price limit i.e lower price an asset can be sold\",\"params\":{\"newPriceLimit\":\": Required: Lowest price to activate trade for asset.\",\"storeId\":\": Required: Store Id. Every Seller maintain a store with a reference Id. Sellers must know where their items are stacked.\"}},\"editSupportAsset(uint256,uint8)\":{\"details\":\"Only owner function: Owner can activate or deactivate asset\",\"params\":{\"assetId\":\": Asset Id to update.\",\"value\":\": Value to set for asset. If '0' asset is deactivated otherwise activated.\"}},\"getData()\":{\"details\":\"Readonly: Return data from storage\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unSupportAsset(uint256)\":{\"details\":\"Unsupport asset\",\"params\":{\"assetId\":\": Asset Id\"}}},\"stateVariables\":{\"storeFront\":{\"details\":\"Array of storeItems \"},\"supportedAssets\":{\"details\":\"Supported assets\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setSupportedAsset(address,uint8)\":{\"notice\":\"See _setSupportedAsset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/Registry.sol\":\"RegistryMain\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IXWallet {\\r\\n    function transferCUSD(address to, uint amount, uint fee) external returns(bool);\\r\\n}\\r\\n\\r\\ninterface IRegistry {\\r\\n    enum Category { MEME, NFT, DEFI, GOVERNANCE, RWA, GAMING, YIELDOPTIMIZER, SPORT, PRIVACY, METAVERSE }\\r\\n    error InvalidAssetId(uint assetId);\\r\\n    error TokenBalanceInStoreTooLow();\\r\\n    error NotPermitted();\\r\\n    error InvalidStoreId();\\r\\n    error AssetTransferFailed();\\r\\n\\r\\n    struct StoreData {\\r\\n        address asset;\\r\\n        address seller;\\r\\n        uint priceLimit;\\r\\n        AssetMetadata metadata;\\r\\n        StoreInfo info;\\r\\n    }\\r\\n\\r\\n    struct StoreInfo {\\r\\n        uint quantity;\\r\\n        uint assetId;\\r\\n        uint storeId;\\r\\n        // uint \\r\\n    }\\r\\n\\r\\n    struct AssetMetadata {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        uint8 decimals;\\r\\n        Category category;\\r\\n    }\\r\\n\\r\\n    struct SupportedAsset {\\r\\n        uint assetId;\\r\\n        IERC20 asset;\\r\\n        bool isVerified;\\r\\n        Category category;\\r\\n        string name;\\r\\n        string symbol;\\r\\n    }\\r\\n\\r\\n    struct Wallet {\\r\\n        address owner;\\r\\n        address xWallet;\\r\\n    }\\r\\n\\r\\n    struct WalletInfo {\\r\\n        uint id;\\r\\n        bool hasWallet;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        StoreData[] stores;\\r\\n        SupportedAsset[] supportedAssets;\\r\\n        Wallet[] xWallets;\\r\\n    }\\r\\n\\r\\n    function addItemToStoreFront(uint assetId, uint priceLimit) external returns(bool);\\r\\n    function createXWallet() external returns(bool);\\r\\n    function buy(uint storeId, uint amount, uint offerPrice) external returns(bool);\\r\\n  \\r\\n    event ItemAdded(uint itemId, IERC20 asset);\\r\\n    event ItemRemoved(uint itemId, IERC20 asset);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract XWallet is Ownable {\\r\\n    address public cUSD;\\r\\n    address public feeTo;\\r\\n\\r\\n    constructor (address _cUSD, address _feeTo) Ownable(_msgSender()) {\\r\\n        require(_cUSD != address(0) && _feeTo != address(0), \\\"Initial Addresses are empty\\\");\\r\\n        cUSD = _cUSD;\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function _sendCUSD(address to, uint amount) private {\\r\\n        if(IERC20(cUSD).balanceOf(address(this)) < amount) {\\r\\n            revert InsufficientBalance();\\r\\n        }\\r\\n        require(IERC20(cUSD).transfer(to, amount), \\\"XWallet: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function transferCUSD(address to, uint amount, uint fee) external onlyOwner returns(bool) {\\r\\n        if(fee > 0) {\\r\\n            _sendCUSD(feeTo, fee);\\r\\n        }\\r\\n        _sendCUSD(to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    error InsufficientBalance();\\r\\n}\\r\\n\\r\\ncontract RegistryMain is IRegistry, Ownable {\\r\\n    // CUSD address\\r\\n    address public cUSD;\\r\\n\\r\\n    // Fee receiver\\r\\n    address public feeTo;\\r\\n\\r\\n    ///@dev Supported assets\\r\\n    SupportedAsset[] private supportedAssets;\\r\\n\\r\\n    ///@dev Array of storeItems \\r\\n    StoreData[] private storeFront;\\r\\n\\r\\n    // xWallet\\r\\n    Wallet[] private xWallets;\\r\\n\\r\\n    // Wallet Ids\\r\\n    mapping(address => WalletInfo) private walletInfo;\\r\\n\\r\\n    /**@dev Only Store owner function\\r\\n     * @param storeId : item identifier or position in storage \\r\\n     */\\r\\n    modifier isStoreOwner(uint storeId) {\\r\\n        if (storeFront[storeId].seller != _msgSender()) {\\r\\n            revert NotPermitted();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**@dev Ensures that uninitialize array slot is not accessed\\r\\n     * @param assetId : Asset identifier or assset position in storage \\r\\n     */\\r\\n    modifier validateAssetId(uint assetId) {\\r\\n        if (assetId >= supportedAssets.length) {\\r\\n            revert InvalidAssetId(assetId);\\r\\n        }\\r\\n        require(supportedAssets[assetId].isVerified, \\\"Asset disabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**@dev Ensures that uninitialize StoreFront array slot is not accessed\\r\\n     * @param storeId : item identifier or position in storage \\r\\n     */\\r\\n    modifier validateStoreId(uint storeId) {\\r\\n        require(_isStoreIdValid(storeId), \\\"Invalid storeId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validateCategoryId(uint8 categoryId) {\\r\\n        require(categoryId < 10, \\\"Unsupport asset id\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IERC20[] memory _supportedAssets,\\r\\n        uint8[] memory _categories,\\r\\n        address _cUSD,\\r\\n        address _feeReceiver\\r\\n    ) Ownable(msg.sender) {\\r\\n        require(_cUSD != address(0) && _feeReceiver != address(0), _cUSD == address(0)? \\\"invalid CUSD address\\\" : \\\"Invalid FeeReceiver\\\");\\r\\n        cUSD = _cUSD;\\r\\n        feeTo = _feeReceiver;\\r\\n        require(_categories.length == _supportedAssets.length, \\\"Length mismatch\\\");\\r\\n        for (uint i = 0; i < _supportedAssets.length; i++) {\\r\\n            _setSupportedAsset(_supportedAssets[i], _categories[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function : Validate store Id\\r\\n     * @param storeId : Item id\\r\\n     */\\r\\n    function _isStoreIdValid(uint storeId) internal view returns (bool isValid) {\\r\\n        isValid = storeId < storeFront.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves asset from position { assetId }\\r\\n     * @param assetId : Asset position in storage\\r\\n     */\\r\\n    function _getAssetContract(\\r\\n        uint assetId\\r\\n    ) internal view returns (IERC20 assetContract, Category category) {\\r\\n        assetContract = supportedAssets[assetId].asset;\\r\\n        category = supportedAssets[assetId].category;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Generates new asset Id\\r\\n     */\\r\\n    function _generateAssetId() private view returns (uint assetId) {\\r\\n        assetId = supportedAssets.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function: Set a new supported asset\\r\\n     * @param _supportedAssets : ERC20 standard asset to support.\\r\\n     */\\r\\n    function _setSupportedAsset(IERC20 _supportedAssets, uint8 categoryId) private {\\r\\n        uint assetId = _generateAssetId();\\r\\n        supportedAssets.push(\\r\\n            SupportedAsset({\\r\\n                assetId: assetId,\\r\\n                asset: _supportedAssets,\\r\\n                isVerified: true,\\r\\n                category: Category(categoryId),\\r\\n                name: IERC20Metadata(address(_supportedAssets)).name(),\\r\\n                symbol: IERC20Metadata(address(_supportedAssets)).symbol()\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new xwallet\\r\\n     */\\r\\n    function createXWallet() external returns (bool) {\\r\\n        address caller = _msgSender();\\r\\n        WalletInfo memory wif = walletInfo[caller];\\r\\n        if (!wif.hasWallet) {\\r\\n            walletInfo[caller] = WalletInfo(xWallets.length, true);\\r\\n            address newXWallet = address(new XWallet(cUSD, feeTo)); \\r\\n            xWallets.push(Wallet(caller, newXWallet));\\r\\n        } else { revert(\\\"XWallet exist\\\"); }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Add item to storeFront\\r\\n     * @param assetId : Identifier for the verified asset listed on the frontend. This should correspond\\r\\n     * to the id on the smart contract.\\r\\n     * @param priceLimit: Lowest price at which trade should execute. Price should be denominated in cUSD\\r\\n     * using 18 decimals.\\r\\n     * Example: If the price for an item is 0.1cUSD, it should be written as 1e17 wei or equivalently 100000000000000000\\r\\n     * otherwise, we will have a very inconsistent figures.\\r\\n     * \\r\\n     * Note: Sellers are required to pay fees in CUSD as a prerequisite to adding asset to storeFront.\\r\\n     *       Seller should fund their onchain Wallet before making this call.\\r\\n     *       =========== THIS IS FUNCTION RESERVED TO BE IMPLEMENTED IN THE FUTURE==============\\r\\n     */\\r\\n    function addItemToStoreFront(\\r\\n        uint assetId,\\r\\n        uint priceLimit \\r\\n    ) external validateAssetId(assetId) returns(bool) {\\r\\n        (IERC20 assetContract, Category category) = _getAssetContract(assetId);\\r\\n        address seller = _msgSender();\\r\\n        address registry = address(this);\\r\\n        uint quantity = IERC20(assetContract).allowance(seller, registry);\\r\\n        uint storeId = storeFront.length;\\r\\n        require(quantity > 0, \\\"StoreFront: Quantity too low\\\");\\r\\n        storeFront.push(\\r\\n            StoreData(\\r\\n                address(assetContract),\\r\\n                seller,\\r\\n                priceLimit,\\r\\n                // true,\\r\\n                AssetMetadata(\\r\\n                    IERC20Metadata(address(assetContract)).name(),\\r\\n                    IERC20Metadata(address(assetContract)).symbol(),\\r\\n                    IERC20Metadata(address(assetContract)).decimals(),\\r\\n                    category\\r\\n                ), \\r\\n                StoreInfo(quantity, assetId, storeId)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit ItemAdded(assetId, assetContract);\\r\\n        require(\\r\\n            IERC20(assetContract).transferFrom(seller, registry, quantity),\\r\\n            \\\"TransferFrom failed\\\"\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only store owner function: Change price limit i.e lower price an asset can be sold\\r\\n     * @param storeId : Required: Store Id. Every Seller maintain a store with a reference Id. Sellers must know where their items are stacked.\\r\\n     * @param newPriceLimit : Required: Lowest price to activate trade for asset.\\r\\n     */\\r\\n    function editPriceLimit(\\r\\n        uint storeId,\\r\\n        uint224 newPriceLimit\\r\\n    ) external validateStoreId(storeId) isStoreOwner(storeId) returns (bool) {\\r\\n        storeFront[storeId].priceLimit = newPriceLimit;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only owner function: Owner can activate or deactivate asset\\r\\n     * @param assetId : Asset Id to update.\\r\\n     * @param value : Value to set for asset. If '0' asset is deactivated otherwise activated.\\r\\n     */\\r\\n    function editSupportAsset(\\r\\n        uint assetId,\\r\\n        uint8 value\\r\\n    ) public onlyOwner validateAssetId(assetId) returns (bool) {\\r\\n        bool prev = supportedAssets[assetId].isVerified;\\r\\n        bool isVerified = value == 0 ? false : true;\\r\\n        prev? require(value == 0, \\\"Already activated\\\") : require(value > 0, \\\"Already deactivated\\\"); \\r\\n        supportedAssets[assetId].isVerified = isVerified;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev private function: Executes trade on the instant.\\r\\n     * Note: Buyers maintain an internal wallet created automatically for them on signUp.\\r\\n     * Buyer is expected to fund mapped wallet before initiating a trade otherwise execution fails.\\r\\n     * @param storeId : Store Id.\\r\\n     * @param amount : Amount of token to order.\\r\\n     * @param buyer: Buyer address\\r\\n     * @param offerPrice: Price at which buyer is willing to buy\\r\\n     * Offerprice should be specified in the same format as limitPrice\\r\\n     */\\r\\n    function _makePurchase(\\r\\n        uint storeId,\\r\\n        uint amount,\\r\\n        address buyer,\\r\\n        uint offerPrice\\r\\n    ) private {\\r\\n        address xw = xWallets[walletInfo[buyer].id].xWallet;\\r\\n        require(xw != address(0), \\\"No xWallet detected\\\");\\r\\n        if (_isStoreIdValid(storeId)) {\\r\\n            StoreData memory req = storeFront[storeId];\\r\\n            require(offerPrice >= req.priceLimit, \\\"OfferPrice too low\\\");\\r\\n            if (req.info.quantity >= amount) {\\r\\n                uint256 amtToPay;\\r\\n                uint fee = 1e17 wei;\\r\\n                unchecked {\\r\\n                    amtToPay = (amount * offerPrice) / 1 ether;\\r\\n                }\\r\\n                storeFront[storeId].info.quantity = req.info.quantity - amount;\\r\\n                require(\\r\\n                    IERC20(cUSD).balanceOf(xw) >= (amtToPay + fee),\\r\\n                    \\\"Insufficient bal in xw\\\"\\r\\n                );\\r\\n                require(\\r\\n                    IXWallet(xw).transferCUSD(req.seller, amtToPay, fee),\\r\\n                    \\\"XWallet: Transfer failed\\\"\\r\\n                );\\r\\n                if (!IERC20(req.asset).transfer(buyer, amount)) {\\r\\n                    revert AssetTransferFailed();\\r\\n                }\\r\\n            } else {\\r\\n                revert TokenBalanceInStoreTooLow();\\r\\n            }\\r\\n        } else {\\r\\n            revert InvalidStoreId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buyer purchases token\\r\\n     * @param storeId : Store Id\\r\\n     * @param amount : Quantity of token/coin to buy\\r\\n     * @param offerPrice : Price they're willing to offer. Note: Price must be greater than minimum listed price.\\r\\n     */\\r\\n    function buy(\\r\\n        uint storeId,\\r\\n        uint amount,\\r\\n        uint offerPrice\\r\\n    ) external validateStoreId(storeId) returns (bool) {\\r\\n        _makePurchase(storeId, amount, _msgSender(), offerPrice);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * See _setSupportedAsset\\r\\n     */\\r\\n    function setSupportedAsset(IERC20 _asset, uint8 category) public onlyOwner returns (bool) {\\r\\n        _setSupportedAsset(_asset, category);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unsupport asset\\r\\n     * @param assetId : Asset Id\\r\\n     */\\r\\n    function unSupportAsset(\\r\\n        uint assetId\\r\\n    ) public onlyOwner validateAssetId(assetId) returns (bool) {\\r\\n        supportedAssets[assetId].isVerified = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Readonly: Return data from storage\\r\\n     */\\r\\n    function getData() public view returns(Storage memory stg) {\\r\\n            stg.stores = storeFront;\\r\\n            stg.supportedAssets = supportedAssets;\\r\\n            stg.xWallets = xWallets;\\r\\n        return stg;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1c0570f82f8e2fb6d9588033cfe44ab420dface85f0109aaac02e606bb404a01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200377b3803806200377b833981016040819052620000349162000678565b338062000075576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b620000898164010000000062000287810204565b50600160a060020a03821615801590620000ab5750600160a060020a03811615155b600160a060020a03831615620000f7576040518060400160405280601381526020017f496e76616c6964204665655265636569766572000000000000000000000000008152506200012e565b6040518060400160405280601481526020017f696e76616c6964204355534420616464726573730000000000000000000000008152505b9062000169576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200006c919062000792565b5060018054600160a060020a03808516600160a060020a0319928316179092556002805492841692909116919091179055835183511462000207576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4c656e677468206d69736d61746368000000000000000000000000000000000060448201526064016200006c565b60005b84518110156200027c57620002678582815181106200022d576200022d620007c7565b60200260200101518583815181106200024a576200024a620007c7565b6020026020010151620002d7640100000000026401000000009004565b806200027381620007f6565b9150506200020a565b505050505062000a7a565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002ec6401000000006200053e810204565b905060036040518060c0016040528083815260200185600160a060020a031681526020016001151581526020018460ff16600981111562000331576200033162000837565b600981111562000345576200034562000837565b815260200185600160a060020a03166306fdde036040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381865afa158015620003a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003cf919081019062000866565b815260200185600160a060020a03166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381865afa1580156200042f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000459919081019062000866565b905281546001818101845560009384526020938490208351600490930201918255928201519281018054604084015115157401000000000000000000000000000000000000000002600160a860020a0319909116600160a060020a039095169490941793909317808455606083015192939192919060a860020a60ff021916750100000000000000000000000000000000000000000083600981111562000504576200050462000837565b0217905550608082015160028201906200051f9082620009a8565b5060a08201516003820190620005369082620009a8565b505050505050565b60035490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f191681016001604060020a03811182821017156200059e576200059e62000544565b604052919050565b60006001604060020a03821115620005c257620005c262000544565b5060209081020190565b600160a060020a0381168114620005e257600080fd5b50565b600082601f830112620005f757600080fd5b81516020620006106200060a83620005a6565b62000573565b828152918102840181019181810190868411156200062d57600080fd5b8286015b848110156200065b57805160ff811681146200064d5760008081fd5b835291830191830162000631565b509695505050505050565b80516200067381620005cc565b919050565b600080600080608085870312156200068f57600080fd5b84516001604060020a0380821115620006a757600080fd5b818701915087601f830112620006bc57600080fd5b81516020620006cf6200060a83620005a6565b8281529181028401810191818101908b841115620006ec57600080fd5b948201945b83861015620007175785516200070781620005cc565b82529482019490820190620006f1565b918a01519198509093505050808211156200073157600080fd5b506200074087828801620005e5565b935050620007516040860162000666565b9150620007616060860162000666565b905092959194509250565b60005b83811015620007895781810151838201526020016200076f565b50506000910152565b6020815260008251806020840152620007b38160408501602087016200076c565b601f01601f19169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006001820162000830577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000602082840312156200087957600080fd5b81516001604060020a03808211156200089157600080fd5b818401915084601f830112620008a657600080fd5b815181811115620008bb57620008bb62000544565b620008d0601f8201601f191660200162000573565b9150808252856020828501011115620008e857600080fd5b620008fb8160208401602086016200076c565b50949350505050565b6002810460018216806200091957607f821691505b60208210810362000953577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115620009a3576000818152602081206020601f86010481016020861015620009825750805b6020601f860104820191505b8181101562000536578281556001016200098e565b505050565b81516001604060020a03811115620009c457620009c462000544565b620009dc81620009d5845462000904565b8462000959565b602080601f83116001811462000a185760008415620009fb5750858301515b60028086026008870290910a600019041982161786555062000536565b600085815260208120601f198616915b8281101562000a495788860151825594840194600190910190840162000a28565b508582101562000a6a57878501516008601f88160260020a60001904191681555b5050505050600202600101905550565b612cf18062000a8a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000e45760003560e060020a9004806361b24740116200009b5780638da5cb5b11620000725780638da5cb5b14620001ca5780638f2349f814620001dc5780639ca1977514620001f3578063f2fde38b146200020a57600080fd5b806361b24740146200019d5780636fd661e414620001b4578063715018a614620001be57600080fd5b8063017e7e5814620000e957806313e5b327146200011a5780631fccf67214620001425780633bc5de30146200015657806340993b26146200016f57806356f8e2e81462000186575b600080fd5b600254620000fd90600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b620001316200012b36600462001e32565b62000221565b604051901515815260200162000111565b600154620000fd90600160a060020a031681565b620001606200034f565b6040516200011191906200202f565b620001316200018036600462002188565b62000856565b6200013162000197366004620021b5565b620008cf565b62000131620001ae366004620021cf565b620009bf565b6200013162000f97565b620001c86200116e565b005b600054600160a060020a0316620000fd565b62000131620001ed36600462002202565b62001186565b620001316200020436600462002240565b62001390565b620001c86200021b36600462002273565b620013b2565b60008262000230816004541190565b620002855760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642073746f72654964000000000000000000000000000000000060448201526064015b60405180910390fd5b8333600160a060020a031660048281548110620002a657620002a66200229a565b6000918252602090912060016009909202010154600160a060020a031614620002fb576040517f39218f3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600486815481106200033057620003306200229a565b6000918252602090912060026009909202010155506001949350505050565b6200037460405180606001604052806060815260200160608152602001606081525090565b6004805480602002602001604051908101604052809291908181526020016000905b82821015620005b75760008481526020908190206040805160a081018252600986029092018054600160a060020a0390811684526001820154169383019390935260028301548282015280516080810190915260038301805492939260608501929190829082906200040890620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200043690620022b3565b8015620004875780601f106200045b5761010080835404028352916020019162000487565b820191906000526020600020905b8154815290600101906020018083116200046957829003601f168201915b50505050508152602001600182018054620004a290620022b3565b80601f0160208091040260200160405190810160405280929190818152602001828054620004d090620022b3565b8015620005215780601f10620004f55761010080835404028352916020019162000521565b820191906000526020600020905b8154815290600101906020018083116200050357829003601f168201915b5050509183525050600282015460ff808216602084015260409092019161010090910416600981111562000559576200055962001ed9565b60098111156200056d576200056d62001ed9565b815250508152602001600682016040518060600160405290816000820154815260200160018201548152602001600282015481525050815250508152602001906001019062000396565b50505090825250600380546040805160208084028201810190925282815292919060009084015b82821015620007d45760008481526020908190206040805160c08101825260048602909201805483526001810154600160a060020a0381169484019490945260ff740100000000000000000000000000000000000000008504811615159284019290925291926060840191750100000000000000000000000000000000000000000090910416600981111562000678576200067862001ed9565b60098111156200068c576200068c62001ed9565b8152602001600282018054620006a290620022b3565b80601f0160208091040260200160405190810160405280929190818152602001828054620006d090620022b3565b8015620007215780601f10620006f55761010080835404028352916020019162000721565b820191906000526020600020905b8154815290600101906020018083116200070357829003601f168201915b505050505081526020016003820180546200073c90620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200076a90620022b3565b8015620007bb5780601f106200078f57610100808354040283529160200191620007bb565b820191906000526020600020905b8154815290600101906020018083116200079d57829003601f168201915b50505050508152505081526020019060010190620005de565b505050506020808301919091526005805460408051828502810185019091528181529260009084015b828210156200084a57600084815260209081902060408051808201909152600285029091018054600160a060020a03908116835260019182015416828401529083529092019101620007fd565b50505050604082015290565b60008362000865816004541190565b620008b65760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642073746f72654964000000000000000000000000000000000060448201526064016200027c565b620008c4858533866200140f565b506001949350505050565b6000620008db62001aba565b600354829081106200091d576040517f1ea95154000000000000000000000000000000000000000000000000000000008152600481018290526024016200027c565b600381815481106200093357620009336200229a565b906000526020600020906004020160010160149054906101000a900460ff16620009745760405160e560020a62461bcd0281526004016200027c90620022ec565b6000600384815481106200098c576200098c6200229a565b906000526020600020906004020160010160146101000a81548160ff021916908315150217905550600191505b50919050565b6003546000908390811062000a04576040517f1ea95154000000000000000000000000000000000000000000000000000000008152600481018290526024016200027c565b6003818154811062000a1a5762000a1a6200229a565b906000526020600020906004020160010160149054906101000a900460ff1662000a5b5760405160e560020a62461bcd0281526004016200027c90620022ec565b60008062000a698662001b02565b91509150600062000a773390565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03808316600483015230602483018190529293506000919086169063dd62ed3e90604401602060405180830381865afa15801562000ae6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0c919062002323565b6004549091508162000b645760405160e560020a62461bcd02815260206004820152601c60248201527f53746f726546726f6e743a205175616e7469747920746f6f206c6f770000000060448201526064016200027c565b60046040518060a0016040528088600160a060020a0316815260200186600160a060020a031681526020018b815260200160405180608001604052808a600160a060020a03166306fdde036040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562000be2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000c0c919081019062002356565b81526020018a600160a060020a03166395d89b416040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562000c53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000c7d919081019062002356565b81526020018a600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381865afa15801562000cc4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cea91906200240f565b60ff16815260200189600981111562000d075762000d0762001ed9565b815250815260200160405180606001604052808681526020018e815260200185815250815250908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020155606082015181600301600082015181600001908162000dda91906200247e565b506020820151600182019062000df190826200247e565b50604082015160028201805460ff90921660ff1983168117825560608501519261ffff19161761010083600981111562000e2f5762000e2f62001ed9565b021790555050506080919091015180516006830155602080820151600784015560409182015160089093019290925580518c8152600160a060020a038916928101929092527f6375005112faeb3c31f129d3aa24c423df50ca6f7c78b0490c6f4b691feac38a910160405180910390a16040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490528716906323b872dd906064016020604051808303816000875af115801562000f10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f36919062002551565b62000f875760405160e560020a62461bcd02815260206004820152601360248201527f5472616e7366657246726f6d206661696c65640000000000000000000000000060448201526064016200027c565b5060019998505050505050505050565b3360008181526006602090815260408083208151808301909252805482526001015460ff161515918101829052919291906200111957604080518082018252600554815260016020808301828152600160a060020a0387811660009081526006909352858320945185559051938301805460ff191694151594909417909355905460025493519193908316921690620010309062001e24565b600160a060020a03928316815291166020820152604001604051809103906000f08015801562001064573d6000803e3d6000fd5b5060408051808201909152600160a060020a0380861682529182166020820190815260058054600181018255600091909152915160029092027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101805493851673ffffffffffffffffffffffffffffffffffffffff1994851617905590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190910180549190931691161790555062001165565b60405160e560020a62461bcd02815260206004820152600d60248201527f5857616c6c65742065786973740000000000000000000000000000000000000060448201526064016200027c565b60019250505090565b6200117862001aba565b62001184600062001b7e565b565b60006200119262001aba565b60035483908110620011d4576040517f1ea95154000000000000000000000000000000000000000000000000000000008152600481018290526024016200027c565b60038181548110620011ea57620011ea6200229a565b906000526020600020906004020160010160149054906101000a900460ff166200122b5760405160e560020a62461bcd0281526004016200027c90620022ec565b6000600385815481106200124357620012436200229a565b6000918252602082206001600490920201015460ff74010000000000000000000000000000000000000000909104811692508516156200128557600162001288565b60005b905081620012ee5760008560ff1611620012e85760405160e560020a62461bcd02815260206004820152601360248201527f416c72656164792064656163746976617465640000000000000000000000000060448201526064016200027c565b62001344565b60ff851615620013445760405160e560020a62461bcd02815260206004820152601160248201527f416c72656164792061637469766174656400000000000000000000000000000060448201526064016200027c565b80600387815481106200135b576200135b6200229a565b906000526020600020906004020160010160146101000a81548160ff0219169083151502179055506001935050505092915050565b60006200139c62001aba565b620013a8838362001bdb565b5060015b92915050565b620013bc62001aba565b600160a060020a03811662001401576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016200027c565b6200140c8162001b7e565b50565b600160a060020a0382166000908152600660205260408120546005805490919081106200144057620014406200229a565b6000918252602090912060016002909202010154600160a060020a0316905080620014b15760405160e560020a62461bcd02815260206004820152601360248201527f4e6f207857616c6c65742064657465637465640000000000000000000000000060448201526064016200027c565b620014bd856004541190565b1562001a8157600060048681548110620014db57620014db6200229a565b60009182526020918290206040805160a08101825260099093029091018054600160a060020a0390811684526001820154169383019390935260028301548282015280516080810190915260038301805492939260608501929190829082906200154590620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200157390620022b3565b8015620015c45780601f106200159857610100808354040283529160200191620015c4565b820191906000526020600020905b815481529060010190602001808311620015a657829003601f168201915b50505050508152602001600182018054620015df90620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200160d90620022b3565b80156200165e5780601f1062001632576101008083540402835291602001916200165e565b820191906000526020600020905b8154815290600101906020018083116200164057829003601f168201915b5050509183525050600282015460ff808216602084015260409092019161010090910416600981111562001696576200169662001ed9565b6009811115620016aa57620016aa62001ed9565b81525050815260200160068201604051806060016040529081600082015481526020016001820154815260200160028201548152505081525050905080604001518310156200173f5760405160e560020a62461bcd02815260206004820152601260248201527f4f66666572507269636520746f6f206c6f77000000000000000000000000000060448201526064016200027c565b608081015151851162001a4857608081015151670de0b6b3a7640000848702049067016345785d8a000090620017779088906200258e565b600489815481106200178d576200178d6200229a565b6000918252602090912060066009909202010155620017ad8183620025a4565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152909116906370a0823190602401602060405180830381865afa15801562001811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001837919062002323565b10156200188a5760405160e560020a62461bcd02815260206004820152601660248201527f496e73756666696369656e742062616c20696e2078770000000000000000000060448201526064016200027c565b60208301516040517f6be8d561000000000000000000000000000000000000000000000000000000008152600160a060020a039182166004820152602481018490526044810183905290851690636be8d561906064016020604051808303816000875af115801562001900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001926919062002551565b620019775760405160e560020a62461bcd02815260206004820152601860248201527f5857616c6c65743a205472616e73666572206661696c6564000000000000000060448201526064016200027c565b82516040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152602482018a90529091169063a9059cbb906044016020604051808303816000875af1158015620019e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a09919062002551565b62001a40576040517f4c9b841900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505062001a7a565b6040517f0511ed7500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5062001ab3565b6040517fbbdc89a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600054600160a060020a0316331462001184576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016200027c565b6000806003838154811062001b1b5762001b1b6200229a565b906000526020600020906004020160010160009054906101000a9004600160a060020a031691506003838154811062001b585762001b586200229a565b906000526020600020906004020160010160159054906101000a900460ff169050915091565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062001be760035490565b905060036040518060c0016040528083815260200185600160a060020a031681526020016001151581526020018460ff16600981111562001c2c5762001c2c62001ed9565b600981111562001c405762001c4062001ed9565b815260200185600160a060020a03166306fdde036040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562001c87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001cb1919081019062002356565b815260200185600160a060020a03166395d89b416040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562001cf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001d22919081019062002356565b90528154600181810184556000938452602093849020835160049093020191825592820151928101805460408401511515740100000000000000000000000000000000000000000274ffffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039095169490941793909317808455606083015192939192919075ff0000000000000000000000000000000000000000001916750100000000000000000000000000000000000000000083600981111562001dea5762001dea62001ed9565b02179055506080820151600282019062001e0590826200247e565b5060a0820151600382019062001e1c90826200247e565b505050505050565b61070180620025bb83390190565b6000806040838503121562001e4657600080fd5b8235915060208301357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811462001e7a57600080fd5b809150509250929050565b60005b8381101562001ea257818101518382015260200162001e88565b50506000910152565b6000815180845262001ec581602086016020860162001e85565b601f01601f19169290920160200192915050565b60e060020a634e487b7102600052602160045260246000fd5b600a811062001f145760e060020a634e487b7102600052602160045260246000fd5b9052565b600081518084526020808501808196508284028101915082860160005b8581101562001fcd578284038952815160c081518652600160a060020a038783015116878701526040808301511515818801525060608083015162001f7d8289018262001ef2565b5050608080830151828289015262001f988389018262001eab565b9250505060a0808301519250868203818801525062001fb8818362001eab565b9a87019a955050509084019060010162001f35565b5091979650505050505050565b600081518084526020808501945080840160005b83811015620020245781518051600160a060020a0390811689529084015116838801526040909601959082019060010162001fee565b509495945050505050565b60006020808352608080840185516060808588015282825180855260a08901915060a08782028a01019450868401935060005b818110156200213a57609f198a8703018352845160e0600160a060020a03808351168952808b840151168b8a015250604080830151818a01528683015182888b015280518b848c0152620020bb6101608c018262001eab565b9350508b81015160df198b8503016101008c0152620020db848262001eab565b9282015160ff166101208c015250870151909150620020ff6101408a018262001ef2565b50908801519062002126888a01838051825260208082015190830152604090810151910152565b965050938701939187019160010162002062565b505050848801519450601f199350838784030160408801526200215e838662001f18565b94506040880151925083878603018188015250506200217e838262001fda565b9695505050505050565b6000806000606084860312156200219e57600080fd5b505081359360208301359350604090920135919050565b600060208284031215620021c857600080fd5b5035919050565b60008060408385031215620021e357600080fd5b50508035926020909101359150565b60ff811681146200140c57600080fd5b600080604083850312156200221657600080fd5b82359150602083013562001e7a81620021f2565b600160a060020a03811681146200140c57600080fd5b600080604083850312156200225457600080fd5b823562002261816200222a565b9150602083013562001e7a81620021f2565b6000602082840312156200228657600080fd5b813562002293816200222a565b9392505050565b60e060020a634e487b7102600052603260045260246000fd5b600281046001821680620022c857607f821691505b602082108103620009b95760e060020a634e487b7102600052602260045260246000fd5b6020808252600e908201527f41737365742064697361626c6564000000000000000000000000000000000000604082015260600190565b6000602082840312156200233657600080fd5b5051919050565b60e060020a634e487b7102600052604160045260246000fd5b6000602082840312156200236957600080fd5b815167ffffffffffffffff808211156200238257600080fd5b818401915084601f8301126200239757600080fd5b815181811115620023ac57620023ac6200233d565b604051601f8201601f19908116603f01168101908382118183101715620023d757620023d76200233d565b81604052828152876020848701011115620023f157600080fd5b6200240483602083016020880162001e85565b979650505050505050565b6000602082840312156200242257600080fd5b81516200229381620021f2565b601f82111562002479576000818152602081206020601f86010481016020861015620024585750805b6020601f860104820191505b8181101562001e1c5782815560010162002464565b505050565b815167ffffffffffffffff8111156200249b576200249b6200233d565b620024b381620024ac8454620022b3565b846200242f565b602080601f831160018114620024ef5760008415620024d25750858301515b60028086026008870290910a600019041982161786555062001e1c565b600085815260208120601f198616915b828110156200252057888601518255948401946001909101908401620024ff565b50858210156200254157878501516008601f88160260020a60001904191681555b5050505050600202600101905550565b6000602082840312156200256457600080fd5b815180151581146200229357600080fd5b60e060020a634e487b7102600052601160045260246000fd5b81810381811115620013ac57620013ac62002575565b80820180821115620013ac57620013ac6200257556fe608060405234801561001057600080fd5b5060405161070138038061070183398101604081905261002f916101c2565b610040640100000000610152810204565b600160a060020a038116610088576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b61009a81640100000000610156810204565b50600160a060020a038216158015906100bb5750600160a060020a03811615155b610121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e697469616c204164647265737365732061726520656d7074790000000000604482015260640161007f565b60018054600160a060020a03938416600160a060020a031991821617909155600280549290931691161790556101f5565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600160a060020a03811681146101bd57600080fd5b919050565b600080604083850312156101d557600080fd5b6101de836101a6565b91506101ec602084016101a6565b90509250929050565b6104fd806102046000396000f3fe608060405234801561001057600080fd5b506004361061007e577c01000000000000000000000000000000000000000000000000000000006000350463017e7e5881146100835780631fccf672146100b35780636be8d561146100c6578063715018a6146100e95780638da5cb5b146100f3578063f2fde38b14610104575b600080fd5b60025461009690600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b60015461009690600160a060020a031681565b6100d96100d4366004610437565b610117565b60405190151581526020016100aa565b6100f1610151565b005b600054600160a060020a0316610096565b6100f161011236600461046a565b610165565b60006101216101c1565b811561013d5760025461013d90600160a060020a031683610207565b6101478484610207565b5060019392505050565b6101596101c1565b61016360006103be565b565b61016d6101c1565b600160a060020a0381166101b5576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6101be816103be565b50565b600054600160a060020a03163314610163576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016101ac565b6001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528291600160a060020a0316906370a0823190602401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c919061048c565b10156102c4576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035491906104a5565b6103ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5857616c6c65743a205472616e73666572206661696c6564000000000000000060448201526064016101ac565b5050565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035600160a060020a038116811461043257600080fd5b919050565b60008060006060848603121561044c57600080fd5b6104558461041b565b95602085013595506040909401359392505050565b60006020828403121561047c57600080fd5b6104858261041b565b9392505050565b60006020828403121561049e57600080fd5b5051919050565b6000602082840312156104b757600080fd5b8151801515811461048557600080fdfea264697066735822122054cc6c976f9934c7458a3311e6d8021fcf7137ad72c19ba327c484247d53de2864736f6c63430008140033a2646970667358221220bc2b11dc51320f03add5110488359033acfa45d1e8558cdfa3153d7e6890e68264736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e45760003560e060020a9004806361b24740116200009b5780638da5cb5b11620000725780638da5cb5b14620001ca5780638f2349f814620001dc5780639ca1977514620001f3578063f2fde38b146200020a57600080fd5b806361b24740146200019d5780636fd661e414620001b4578063715018a614620001be57600080fd5b8063017e7e5814620000e957806313e5b327146200011a5780631fccf67214620001425780633bc5de30146200015657806340993b26146200016f57806356f8e2e81462000186575b600080fd5b600254620000fd90600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b620001316200012b36600462001e32565b62000221565b604051901515815260200162000111565b600154620000fd90600160a060020a031681565b620001606200034f565b6040516200011191906200202f565b620001316200018036600462002188565b62000856565b6200013162000197366004620021b5565b620008cf565b62000131620001ae366004620021cf565b620009bf565b6200013162000f97565b620001c86200116e565b005b600054600160a060020a0316620000fd565b62000131620001ed36600462002202565b62001186565b620001316200020436600462002240565b62001390565b620001c86200021b36600462002273565b620013b2565b60008262000230816004541190565b620002855760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642073746f72654964000000000000000000000000000000000060448201526064015b60405180910390fd5b8333600160a060020a031660048281548110620002a657620002a66200229a565b6000918252602090912060016009909202010154600160a060020a031614620002fb576040517f39218f3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600486815481106200033057620003306200229a565b6000918252602090912060026009909202010155506001949350505050565b6200037460405180606001604052806060815260200160608152602001606081525090565b6004805480602002602001604051908101604052809291908181526020016000905b82821015620005b75760008481526020908190206040805160a081018252600986029092018054600160a060020a0390811684526001820154169383019390935260028301548282015280516080810190915260038301805492939260608501929190829082906200040890620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200043690620022b3565b8015620004875780601f106200045b5761010080835404028352916020019162000487565b820191906000526020600020905b8154815290600101906020018083116200046957829003601f168201915b50505050508152602001600182018054620004a290620022b3565b80601f0160208091040260200160405190810160405280929190818152602001828054620004d090620022b3565b8015620005215780601f10620004f55761010080835404028352916020019162000521565b820191906000526020600020905b8154815290600101906020018083116200050357829003601f168201915b5050509183525050600282015460ff808216602084015260409092019161010090910416600981111562000559576200055962001ed9565b60098111156200056d576200056d62001ed9565b815250508152602001600682016040518060600160405290816000820154815260200160018201548152602001600282015481525050815250508152602001906001019062000396565b50505090825250600380546040805160208084028201810190925282815292919060009084015b82821015620007d45760008481526020908190206040805160c08101825260048602909201805483526001810154600160a060020a0381169484019490945260ff740100000000000000000000000000000000000000008504811615159284019290925291926060840191750100000000000000000000000000000000000000000090910416600981111562000678576200067862001ed9565b60098111156200068c576200068c62001ed9565b8152602001600282018054620006a290620022b3565b80601f0160208091040260200160405190810160405280929190818152602001828054620006d090620022b3565b8015620007215780601f10620006f55761010080835404028352916020019162000721565b820191906000526020600020905b8154815290600101906020018083116200070357829003601f168201915b505050505081526020016003820180546200073c90620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200076a90620022b3565b8015620007bb5780601f106200078f57610100808354040283529160200191620007bb565b820191906000526020600020905b8154815290600101906020018083116200079d57829003601f168201915b50505050508152505081526020019060010190620005de565b505050506020808301919091526005805460408051828502810185019091528181529260009084015b828210156200084a57600084815260209081902060408051808201909152600285029091018054600160a060020a03908116835260019182015416828401529083529092019101620007fd565b50505050604082015290565b60008362000865816004541190565b620008b65760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642073746f72654964000000000000000000000000000000000060448201526064016200027c565b620008c4858533866200140f565b506001949350505050565b6000620008db62001aba565b600354829081106200091d576040517f1ea95154000000000000000000000000000000000000000000000000000000008152600481018290526024016200027c565b600381815481106200093357620009336200229a565b906000526020600020906004020160010160149054906101000a900460ff16620009745760405160e560020a62461bcd0281526004016200027c90620022ec565b6000600384815481106200098c576200098c6200229a565b906000526020600020906004020160010160146101000a81548160ff021916908315150217905550600191505b50919050565b6003546000908390811062000a04576040517f1ea95154000000000000000000000000000000000000000000000000000000008152600481018290526024016200027c565b6003818154811062000a1a5762000a1a6200229a565b906000526020600020906004020160010160149054906101000a900460ff1662000a5b5760405160e560020a62461bcd0281526004016200027c90620022ec565b60008062000a698662001b02565b91509150600062000a773390565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03808316600483015230602483018190529293506000919086169063dd62ed3e90604401602060405180830381865afa15801562000ae6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0c919062002323565b6004549091508162000b645760405160e560020a62461bcd02815260206004820152601c60248201527f53746f726546726f6e743a205175616e7469747920746f6f206c6f770000000060448201526064016200027c565b60046040518060a0016040528088600160a060020a0316815260200186600160a060020a031681526020018b815260200160405180608001604052808a600160a060020a03166306fdde036040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562000be2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000c0c919081019062002356565b81526020018a600160a060020a03166395d89b416040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562000c53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000c7d919081019062002356565b81526020018a600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381865afa15801562000cc4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cea91906200240f565b60ff16815260200189600981111562000d075762000d0762001ed9565b815250815260200160405180606001604052808681526020018e815260200185815250815250908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020155606082015181600301600082015181600001908162000dda91906200247e565b506020820151600182019062000df190826200247e565b50604082015160028201805460ff90921660ff1983168117825560608501519261ffff19161761010083600981111562000e2f5762000e2f62001ed9565b021790555050506080919091015180516006830155602080820151600784015560409182015160089093019290925580518c8152600160a060020a038916928101929092527f6375005112faeb3c31f129d3aa24c423df50ca6f7c78b0490c6f4b691feac38a910160405180910390a16040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490528716906323b872dd906064016020604051808303816000875af115801562000f10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f36919062002551565b62000f875760405160e560020a62461bcd02815260206004820152601360248201527f5472616e7366657246726f6d206661696c65640000000000000000000000000060448201526064016200027c565b5060019998505050505050505050565b3360008181526006602090815260408083208151808301909252805482526001015460ff161515918101829052919291906200111957604080518082018252600554815260016020808301828152600160a060020a0387811660009081526006909352858320945185559051938301805460ff191694151594909417909355905460025493519193908316921690620010309062001e24565b600160a060020a03928316815291166020820152604001604051809103906000f08015801562001064573d6000803e3d6000fd5b5060408051808201909152600160a060020a0380861682529182166020820190815260058054600181018255600091909152915160029092027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101805493851673ffffffffffffffffffffffffffffffffffffffff1994851617905590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190910180549190931691161790555062001165565b60405160e560020a62461bcd02815260206004820152600d60248201527f5857616c6c65742065786973740000000000000000000000000000000000000060448201526064016200027c565b60019250505090565b6200117862001aba565b62001184600062001b7e565b565b60006200119262001aba565b60035483908110620011d4576040517f1ea95154000000000000000000000000000000000000000000000000000000008152600481018290526024016200027c565b60038181548110620011ea57620011ea6200229a565b906000526020600020906004020160010160149054906101000a900460ff166200122b5760405160e560020a62461bcd0281526004016200027c90620022ec565b6000600385815481106200124357620012436200229a565b6000918252602082206001600490920201015460ff74010000000000000000000000000000000000000000909104811692508516156200128557600162001288565b60005b905081620012ee5760008560ff1611620012e85760405160e560020a62461bcd02815260206004820152601360248201527f416c72656164792064656163746976617465640000000000000000000000000060448201526064016200027c565b62001344565b60ff851615620013445760405160e560020a62461bcd02815260206004820152601160248201527f416c72656164792061637469766174656400000000000000000000000000000060448201526064016200027c565b80600387815481106200135b576200135b6200229a565b906000526020600020906004020160010160146101000a81548160ff0219169083151502179055506001935050505092915050565b60006200139c62001aba565b620013a8838362001bdb565b5060015b92915050565b620013bc62001aba565b600160a060020a03811662001401576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016200027c565b6200140c8162001b7e565b50565b600160a060020a0382166000908152600660205260408120546005805490919081106200144057620014406200229a565b6000918252602090912060016002909202010154600160a060020a0316905080620014b15760405160e560020a62461bcd02815260206004820152601360248201527f4e6f207857616c6c65742064657465637465640000000000000000000000000060448201526064016200027c565b620014bd856004541190565b1562001a8157600060048681548110620014db57620014db6200229a565b60009182526020918290206040805160a08101825260099093029091018054600160a060020a0390811684526001820154169383019390935260028301548282015280516080810190915260038301805492939260608501929190829082906200154590620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200157390620022b3565b8015620015c45780601f106200159857610100808354040283529160200191620015c4565b820191906000526020600020905b815481529060010190602001808311620015a657829003601f168201915b50505050508152602001600182018054620015df90620022b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200160d90620022b3565b80156200165e5780601f1062001632576101008083540402835291602001916200165e565b820191906000526020600020905b8154815290600101906020018083116200164057829003601f168201915b5050509183525050600282015460ff808216602084015260409092019161010090910416600981111562001696576200169662001ed9565b6009811115620016aa57620016aa62001ed9565b81525050815260200160068201604051806060016040529081600082015481526020016001820154815260200160028201548152505081525050905080604001518310156200173f5760405160e560020a62461bcd02815260206004820152601260248201527f4f66666572507269636520746f6f206c6f77000000000000000000000000000060448201526064016200027c565b608081015151851162001a4857608081015151670de0b6b3a7640000848702049067016345785d8a000090620017779088906200258e565b600489815481106200178d576200178d6200229a565b6000918252602090912060066009909202010155620017ad8183620025a4565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152909116906370a0823190602401602060405180830381865afa15801562001811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001837919062002323565b10156200188a5760405160e560020a62461bcd02815260206004820152601660248201527f496e73756666696369656e742062616c20696e2078770000000000000000000060448201526064016200027c565b60208301516040517f6be8d561000000000000000000000000000000000000000000000000000000008152600160a060020a039182166004820152602481018490526044810183905290851690636be8d561906064016020604051808303816000875af115801562001900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001926919062002551565b620019775760405160e560020a62461bcd02815260206004820152601860248201527f5857616c6c65743a205472616e73666572206661696c6564000000000000000060448201526064016200027c565b82516040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152602482018a90529091169063a9059cbb906044016020604051808303816000875af1158015620019e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a09919062002551565b62001a40576040517f4c9b841900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505062001a7a565b6040517f0511ed7500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5062001ab3565b6040517fbbdc89a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600054600160a060020a0316331462001184576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016200027c565b6000806003838154811062001b1b5762001b1b6200229a565b906000526020600020906004020160010160009054906101000a9004600160a060020a031691506003838154811062001b585762001b586200229a565b906000526020600020906004020160010160159054906101000a900460ff169050915091565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062001be760035490565b905060036040518060c0016040528083815260200185600160a060020a031681526020016001151581526020018460ff16600981111562001c2c5762001c2c62001ed9565b600981111562001c405762001c4062001ed9565b815260200185600160a060020a03166306fdde036040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562001c87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001cb1919081019062002356565b815260200185600160a060020a03166395d89b416040518163ffffffff1660e060020a028152600401600060405180830381865afa15801562001cf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001d22919081019062002356565b90528154600181810184556000938452602093849020835160049093020191825592820151928101805460408401511515740100000000000000000000000000000000000000000274ffffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039095169490941793909317808455606083015192939192919075ff0000000000000000000000000000000000000000001916750100000000000000000000000000000000000000000083600981111562001dea5762001dea62001ed9565b02179055506080820151600282019062001e0590826200247e565b5060a0820151600382019062001e1c90826200247e565b505050505050565b61070180620025bb83390190565b6000806040838503121562001e4657600080fd5b8235915060208301357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811462001e7a57600080fd5b809150509250929050565b60005b8381101562001ea257818101518382015260200162001e88565b50506000910152565b6000815180845262001ec581602086016020860162001e85565b601f01601f19169290920160200192915050565b60e060020a634e487b7102600052602160045260246000fd5b600a811062001f145760e060020a634e487b7102600052602160045260246000fd5b9052565b600081518084526020808501808196508284028101915082860160005b8581101562001fcd578284038952815160c081518652600160a060020a038783015116878701526040808301511515818801525060608083015162001f7d8289018262001ef2565b5050608080830151828289015262001f988389018262001eab565b9250505060a0808301519250868203818801525062001fb8818362001eab565b9a87019a955050509084019060010162001f35565b5091979650505050505050565b600081518084526020808501945080840160005b83811015620020245781518051600160a060020a0390811689529084015116838801526040909601959082019060010162001fee565b509495945050505050565b60006020808352608080840185516060808588015282825180855260a08901915060a08782028a01019450868401935060005b818110156200213a57609f198a8703018352845160e0600160a060020a03808351168952808b840151168b8a015250604080830151818a01528683015182888b015280518b848c0152620020bb6101608c018262001eab565b9350508b81015160df198b8503016101008c0152620020db848262001eab565b9282015160ff166101208c015250870151909150620020ff6101408a018262001ef2565b50908801519062002126888a01838051825260208082015190830152604090810151910152565b965050938701939187019160010162002062565b505050848801519450601f199350838784030160408801526200215e838662001f18565b94506040880151925083878603018188015250506200217e838262001fda565b9695505050505050565b6000806000606084860312156200219e57600080fd5b505081359360208301359350604090920135919050565b600060208284031215620021c857600080fd5b5035919050565b60008060408385031215620021e357600080fd5b50508035926020909101359150565b60ff811681146200140c57600080fd5b600080604083850312156200221657600080fd5b82359150602083013562001e7a81620021f2565b600160a060020a03811681146200140c57600080fd5b600080604083850312156200225457600080fd5b823562002261816200222a565b9150602083013562001e7a81620021f2565b6000602082840312156200228657600080fd5b813562002293816200222a565b9392505050565b60e060020a634e487b7102600052603260045260246000fd5b600281046001821680620022c857607f821691505b602082108103620009b95760e060020a634e487b7102600052602260045260246000fd5b6020808252600e908201527f41737365742064697361626c6564000000000000000000000000000000000000604082015260600190565b6000602082840312156200233657600080fd5b5051919050565b60e060020a634e487b7102600052604160045260246000fd5b6000602082840312156200236957600080fd5b815167ffffffffffffffff808211156200238257600080fd5b818401915084601f8301126200239757600080fd5b815181811115620023ac57620023ac6200233d565b604051601f8201601f19908116603f01168101908382118183101715620023d757620023d76200233d565b81604052828152876020848701011115620023f157600080fd5b6200240483602083016020880162001e85565b979650505050505050565b6000602082840312156200242257600080fd5b81516200229381620021f2565b601f82111562002479576000818152602081206020601f86010481016020861015620024585750805b6020601f860104820191505b8181101562001e1c5782815560010162002464565b505050565b815167ffffffffffffffff8111156200249b576200249b6200233d565b620024b381620024ac8454620022b3565b846200242f565b602080601f831160018114620024ef5760008415620024d25750858301515b60028086026008870290910a600019041982161786555062001e1c565b600085815260208120601f198616915b828110156200252057888601518255948401946001909101908401620024ff565b50858210156200254157878501516008601f88160260020a60001904191681555b5050505050600202600101905550565b6000602082840312156200256457600080fd5b815180151581146200229357600080fd5b60e060020a634e487b7102600052601160045260246000fd5b81810381811115620013ac57620013ac62002575565b80820180821115620013ac57620013ac6200257556fe608060405234801561001057600080fd5b5060405161070138038061070183398101604081905261002f916101c2565b610040640100000000610152810204565b600160a060020a038116610088576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b61009a81640100000000610156810204565b50600160a060020a038216158015906100bb5750600160a060020a03811615155b610121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e697469616c204164647265737365732061726520656d7074790000000000604482015260640161007f565b60018054600160a060020a03938416600160a060020a031991821617909155600280549290931691161790556101f5565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600160a060020a03811681146101bd57600080fd5b919050565b600080604083850312156101d557600080fd5b6101de836101a6565b91506101ec602084016101a6565b90509250929050565b6104fd806102046000396000f3fe608060405234801561001057600080fd5b506004361061007e577c01000000000000000000000000000000000000000000000000000000006000350463017e7e5881146100835780631fccf672146100b35780636be8d561146100c6578063715018a6146100e95780638da5cb5b146100f3578063f2fde38b14610104575b600080fd5b60025461009690600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b60015461009690600160a060020a031681565b6100d96100d4366004610437565b610117565b60405190151581526020016100aa565b6100f1610151565b005b600054600160a060020a0316610096565b6100f161011236600461046a565b610165565b60006101216101c1565b811561013d5760025461013d90600160a060020a031683610207565b6101478484610207565b5060019392505050565b6101596101c1565b61016360006103be565b565b61016d6101c1565b600160a060020a0381166101b5576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6101be816103be565b50565b600054600160a060020a03163314610163576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016101ac565b6001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528291600160a060020a0316906370a0823190602401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c919061048c565b10156102c4576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035491906104a5565b6103ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5857616c6c65743a205472616e73666572206661696c6564000000000000000060448201526064016101ac565b5050565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035600160a060020a038116811461043257600080fd5b919050565b60008060006060848603121561044c57600080fd5b6104558461041b565b95602085013595506040909401359392505050565b60006020828403121561047c57600080fd5b6104858261041b565b9392505050565b60006020828403121561049e57600080fd5b5051919050565b6000602082840312156104b757600080fd5b8151801515811461048557600080fdfea264697066735822122054cc6c976f9934c7458a3311e6d8021fcf7137ad72c19ba327c484247d53de2864736f6c63430008140033a2646970667358221220bc2b11dc51320f03add5110488359033acfa45d1e8558cdfa3153d7e6890e68264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addItemToStoreFront(uint256,uint256)": {
        "details": "Add item to storeFront",
        "params": {
          "assetId": ": Identifier for the verified asset listed on the frontend. This should correspond to the id on the smart contract.",
          "priceLimit": ": Lowest price at which trade should execute. Price should be denominated in cUSD using 18 decimals. Example: If the price for an item is 0.1cUSD, it should be written as 1e17 wei or equivalently 100000000000000000 otherwise, we will have a very inconsistent figures.  Note: Sellers are required to pay fees in CUSD as a prerequisite to adding asset to storeFront.       Seller should fund their onchain Wallet before making this call.       =========== THIS IS FUNCTION RESERVED TO BE IMPLEMENTED IN THE FUTURE=============="
        }
      },
      "buy(uint256,uint256,uint256)": {
        "details": "Buyer purchases token",
        "params": {
          "amount": ": Quantity of token/coin to buy",
          "offerPrice": ": Price they're willing to offer. Note: Price must be greater than minimum listed price.",
          "storeId": ": Store Id"
        }
      },
      "createXWallet()": {
        "details": "Initializes a new xwallet"
      },
      "editPriceLimit(uint256,uint224)": {
        "details": "Only store owner function: Change price limit i.e lower price an asset can be sold",
        "params": {
          "newPriceLimit": ": Required: Lowest price to activate trade for asset.",
          "storeId": ": Required: Store Id. Every Seller maintain a store with a reference Id. Sellers must know where their items are stacked."
        }
      },
      "editSupportAsset(uint256,uint8)": {
        "details": "Only owner function: Owner can activate or deactivate asset",
        "params": {
          "assetId": ": Asset Id to update.",
          "value": ": Value to set for asset. If '0' asset is deactivated otherwise activated."
        }
      },
      "getData()": {
        "details": "Readonly: Return data from storage"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unSupportAsset(uint256)": {
        "details": "Unsupport asset",
        "params": {
          "assetId": ": Asset Id"
        }
      }
    },
    "stateVariables": {
      "storeFront": {
        "details": "Array of storeItems "
      },
      "supportedAssets": {
        "details": "Supported assets"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setSupportedAsset(address,uint8)": {
        "notice": "See _setSupportedAsset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 275,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 532,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "cUSD",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "supportedAssets",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(SupportedAsset)179_storage)dyn_storage"
      },
      {
        "astId": 544,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "storeFront",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(StoreData)147_storage)dyn_storage"
      },
      {
        "astId": 548,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "xWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Wallet)184_storage)dyn_storage"
      },
      {
        "astId": 553,
        "contract": "contracts/verify/Registry.sol:RegistryMain",
        "label": "walletInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(WalletInfo)189_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StoreData)147_storage)dyn_storage": {
        "base": "t_struct(StoreData)147_storage",
        "encoding": "dynamic_array",
        "label": "struct IRegistry.StoreData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SupportedAsset)179_storage)dyn_storage": {
        "base": "t_struct(SupportedAsset)179_storage",
        "encoding": "dynamic_array",
        "label": "struct IRegistry.SupportedAsset[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Wallet)184_storage)dyn_storage": {
        "base": "t_struct(Wallet)184_storage",
        "encoding": "dynamic_array",
        "label": "struct IRegistry.Wallet[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Category)122": {
        "encoding": "inplace",
        "label": "enum IRegistry.Category",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(WalletInfo)189_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRegistry.WalletInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(WalletInfo)189_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetMetadata)164_storage": {
        "encoding": "inplace",
        "label": "struct IRegistry.AssetMetadata",
        "members": [
          {
            "astId": 156,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 158,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 160,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 163,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "category",
            "offset": 1,
            "slot": "2",
            "type": "t_enum(Category)122"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StoreData)147_storage": {
        "encoding": "inplace",
        "label": "struct IRegistry.StoreData",
        "members": [
          {
            "astId": 136,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 138,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 140,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "priceLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 143,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "metadata",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AssetMetadata)164_storage"
          },
          {
            "astId": 146,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "info",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(StoreInfo)154_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(StoreInfo)154_storage": {
        "encoding": "inplace",
        "label": "struct IRegistry.StoreInfo",
        "members": [
          {
            "astId": 149,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "quantity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 151,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "assetId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 153,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "storeId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SupportedAsset)179_storage": {
        "encoding": "inplace",
        "label": "struct IRegistry.SupportedAsset",
        "members": [
          {
            "astId": 166,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "assetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 169,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 171,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "isVerified",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 174,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "category",
            "offset": 21,
            "slot": "1",
            "type": "t_enum(Category)122"
          },
          {
            "astId": 176,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 178,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Wallet)184_storage": {
        "encoding": "inplace",
        "label": "struct IRegistry.Wallet",
        "members": [
          {
            "astId": 181,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 183,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "xWallet",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WalletInfo)189_storage": {
        "encoding": "inplace",
        "label": "struct IRegistry.WalletInfo",
        "members": [
          {
            "astId": 186,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 188,
            "contract": "contracts/verify/Registry.sol:RegistryMain",
            "label": "hasWallet",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}