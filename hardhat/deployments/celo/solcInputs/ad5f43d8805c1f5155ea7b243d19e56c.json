{
  "language": "Solidity",
  "sources": {
    "contracts/verify/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ninterface IXWallet {\r\n    function transferCUSD(address to, uint amount, uint fee) external returns(bool);\r\n}\r\n\r\ninterface IRegistry {\r\n    enum Category { MEME, NFT, DEFI, GOVERNANCE, RWA, GAMING, YIELDOPTIMIZER, SPORT, PRIVACY, METAVERSE }\r\n    error InvalidAssetId(uint assetId);\r\n    error TokenBalanceInStoreTooLow();\r\n    error NotPermitted();\r\n    error InvalidStoreId();\r\n    error AssetTransferFailed();\r\n\r\n    struct StoreData {\r\n        address asset;\r\n        address seller;\r\n        uint priceLimit;\r\n        AssetMetadata metadata;\r\n        StoreInfo info;\r\n    }\r\n\r\n    struct StoreInfo {\r\n        uint quantity;\r\n        uint assetId;\r\n        uint storeId;\r\n        // uint \r\n    }\r\n\r\n    struct AssetMetadata {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        Category category;\r\n    }\r\n\r\n    struct SupportedAsset {\r\n        uint assetId;\r\n        IERC20 asset;\r\n        bool isVerified;\r\n        Category category;\r\n        string name;\r\n        string symbol;\r\n    }\r\n\r\n    struct Wallet {\r\n        address owner;\r\n        address xWallet;\r\n    }\r\n\r\n    struct WalletInfo {\r\n        uint id;\r\n        bool hasWallet;\r\n    }\r\n\r\n    struct Storage {\r\n        StoreData[] stores;\r\n        SupportedAsset[] supportedAssets;\r\n        Wallet[] xWallets;\r\n    }\r\n\r\n    function addItemToStoreFront(uint assetId, uint priceLimit) external returns(bool);\r\n    function createXWallet() external returns(bool);\r\n    function buy(uint storeId, uint amount, uint offerPrice) external returns(bool);\r\n  \r\n    event ItemAdded(uint itemId, IERC20 asset);\r\n    event ItemRemoved(uint itemId, IERC20 asset);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract XWallet is Ownable {\r\n    address public cUSD;\r\n    address public feeTo;\r\n\r\n    constructor (address _cUSD, address _feeTo) Ownable(_msgSender()) {\r\n        require(_cUSD != address(0) && _feeTo != address(0), \"Initial Addresses are empty\");\r\n        cUSD = _cUSD;\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function _sendCUSD(address to, uint amount) private {\r\n        if(IERC20(cUSD).balanceOf(address(this)) < amount) {\r\n            revert InsufficientBalance();\r\n        }\r\n        require(IERC20(cUSD).transfer(to, amount), \"XWallet: Transfer failed\");\r\n    }\r\n\r\n    function transferCUSD(address to, uint amount, uint fee) external onlyOwner returns(bool) {\r\n        if(fee > 0) {\r\n            _sendCUSD(feeTo, fee);\r\n        }\r\n        _sendCUSD(to, amount);\r\n        return true;\r\n    }\r\n\r\n    error InsufficientBalance();\r\n}\r\n\r\ncontract RegistryMain is IRegistry, Ownable {\r\n    // CUSD address\r\n    address public cUSD;\r\n\r\n    // Fee receiver\r\n    address public feeTo;\r\n\r\n    ///@dev Supported assets\r\n    SupportedAsset[] private supportedAssets;\r\n\r\n    ///@dev Array of storeItems \r\n    StoreData[] private storeFront;\r\n\r\n    // xWallet\r\n    Wallet[] private xWallets;\r\n\r\n    // Wallet Ids\r\n    mapping(address => WalletInfo) private walletInfo;\r\n\r\n    /**@dev Only Store owner function\r\n     * @param storeId : item identifier or position in storage \r\n     */\r\n    modifier isStoreOwner(uint storeId) {\r\n        if (storeFront[storeId].seller != _msgSender()) {\r\n            revert NotPermitted();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**@dev Ensures that uninitialize array slot is not accessed\r\n     * @param assetId : Asset identifier or assset position in storage \r\n     */\r\n    modifier validateAssetId(uint assetId) {\r\n        if (assetId >= supportedAssets.length) {\r\n            revert InvalidAssetId(assetId);\r\n        }\r\n        require(supportedAssets[assetId].isVerified, \"Asset disabled\");\r\n        _;\r\n    }\r\n\r\n    /**@dev Ensures that uninitialize StoreFront array slot is not accessed\r\n     * @param storeId : item identifier or position in storage \r\n     */\r\n    modifier validateStoreId(uint storeId) {\r\n        require(_isStoreIdValid(storeId), \"Invalid storeId\");\r\n        _;\r\n    }\r\n\r\n    modifier validateCategoryId(uint8 categoryId) {\r\n        require(categoryId < 10, \"Unsupport asset id\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20[] memory _supportedAssets,\r\n        uint8[] memory _categories,\r\n        address _cUSD,\r\n        address _feeReceiver\r\n    ) Ownable(msg.sender) {\r\n        require(_cUSD != address(0) && _feeReceiver != address(0), _cUSD == address(0)? \"invalid CUSD address\" : \"Invalid FeeReceiver\");\r\n        cUSD = _cUSD;\r\n        feeTo = _feeReceiver;\r\n        require(_categories.length == _supportedAssets.length, \"Length mismatch\");\r\n        for (uint i = 0; i < _supportedAssets.length; i++) {\r\n            _setSupportedAsset(_supportedAssets[i], _categories[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function : Validate store Id\r\n     * @param storeId : Item id\r\n     */\r\n    function _isStoreIdValid(uint storeId) internal view returns (bool isValid) {\r\n        isValid = storeId < storeFront.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves asset from position { assetId }\r\n     * @param assetId : Asset position in storage\r\n     */\r\n    function _getAssetContract(\r\n        uint assetId\r\n    ) internal view returns (IERC20 assetContract, Category category) {\r\n        assetContract = supportedAssets[assetId].asset;\r\n        category = supportedAssets[assetId].category;\r\n    }\r\n\r\n    /**\r\n     * @dev Generates new asset Id\r\n     */\r\n    function _generateAssetId() private view returns (uint assetId) {\r\n        assetId = supportedAssets.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function: Set a new supported asset\r\n     * @param _supportedAssets : ERC20 standard asset to support.\r\n     */\r\n    function _setSupportedAsset(IERC20 _supportedAssets, uint8 categoryId) private {\r\n        uint assetId = _generateAssetId();\r\n        supportedAssets.push(\r\n            SupportedAsset({\r\n                assetId: assetId,\r\n                asset: _supportedAssets,\r\n                isVerified: true,\r\n                category: Category(categoryId),\r\n                name: IERC20Metadata(address(_supportedAssets)).name(),\r\n                symbol: IERC20Metadata(address(_supportedAssets)).symbol()\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes a new xwallet\r\n     */\r\n    function createXWallet() external returns (bool) {\r\n        address caller = _msgSender();\r\n        WalletInfo memory wif = walletInfo[caller];\r\n        if (!wif.hasWallet) {\r\n            walletInfo[caller] = WalletInfo(xWallets.length, true);\r\n            address newXWallet = address(new XWallet(cUSD, feeTo)); \r\n            xWallets.push(Wallet(caller, newXWallet));\r\n        } else { revert(\"XWallet exist\"); }\r\n        return true;\r\n    }\r\n\r\n    /**@dev Add item to storeFront\r\n     * @param assetId : Identifier for the verified asset listed on the frontend. This should correspond\r\n     * to the id on the smart contract.\r\n     * @param priceLimit: Lowest price at which trade should execute. Price should be denominated in cUSD\r\n     * using 18 decimals.\r\n     * Example: If the price for an item is 0.1cUSD, it should be written as 1e17 wei or equivalently 100000000000000000\r\n     * otherwise, we will have a very inconsistent figures.\r\n     * \r\n     * Note: Sellers are required to pay fees in CUSD as a prerequisite to adding asset to storeFront.\r\n     *       Seller should fund their onchain Wallet before making this call.\r\n     *       =========== THIS IS FUNCTION RESERVED TO BE IMPLEMENTED IN THE FUTURE==============\r\n     */\r\n    function addItemToStoreFront(\r\n        uint assetId,\r\n        uint priceLimit \r\n    ) external validateAssetId(assetId) returns(bool) {\r\n        (IERC20 assetContract, Category category) = _getAssetContract(assetId);\r\n        address seller = _msgSender();\r\n        address registry = address(this);\r\n        uint quantity = IERC20(assetContract).allowance(seller, registry);\r\n        uint storeId = storeFront.length;\r\n        require(quantity > 0, \"StoreFront: Quantity too low\");\r\n        storeFront.push(\r\n            StoreData(\r\n                address(assetContract),\r\n                seller,\r\n                priceLimit,\r\n                // true,\r\n                AssetMetadata(\r\n                    IERC20Metadata(address(assetContract)).name(),\r\n                    IERC20Metadata(address(assetContract)).symbol(),\r\n                    IERC20Metadata(address(assetContract)).decimals(),\r\n                    category\r\n                ), \r\n                StoreInfo(quantity, assetId, storeId)\r\n            )\r\n        );\r\n\r\n        emit ItemAdded(assetId, assetContract);\r\n        require(\r\n            IERC20(assetContract).transferFrom(seller, registry, quantity),\r\n            \"TransferFrom failed\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Only store owner function: Change price limit i.e lower price an asset can be sold\r\n     * @param storeId : Required: Store Id. Every Seller maintain a store with a reference Id. Sellers must know where their items are stacked.\r\n     * @param newPriceLimit : Required: Lowest price to activate trade for asset.\r\n     */\r\n    function editPriceLimit(\r\n        uint storeId,\r\n        uint224 newPriceLimit\r\n    ) external validateStoreId(storeId) isStoreOwner(storeId) returns (bool) {\r\n        storeFront[storeId].priceLimit = newPriceLimit;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Only owner function: Owner can activate or deactivate asset\r\n     * @param assetId : Asset Id to update.\r\n     * @param value : Value to set for asset. If '0' asset is deactivated otherwise activated.\r\n     */\r\n    function editSupportAsset(\r\n        uint assetId,\r\n        uint8 value\r\n    ) public onlyOwner validateAssetId(assetId) returns (bool) {\r\n        bool prev = supportedAssets[assetId].isVerified;\r\n        bool isVerified = value == 0 ? false : true;\r\n        prev? require(value == 0, \"Already activated\") : require(value > 0, \"Already deactivated\"); \r\n        supportedAssets[assetId].isVerified = isVerified;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev private function: Executes trade on the instant.\r\n     * Note: Buyers maintain an internal wallet created automatically for them on signUp.\r\n     * Buyer is expected to fund mapped wallet before initiating a trade otherwise execution fails.\r\n     * @param storeId : Store Id.\r\n     * @param amount : Amount of token to order.\r\n     * @param buyer: Buyer address\r\n     * @param offerPrice: Price at which buyer is willing to buy\r\n     * Offerprice should be specified in the same format as limitPrice\r\n     */\r\n    function _makePurchase(\r\n        uint storeId,\r\n        uint amount,\r\n        address buyer,\r\n        uint offerPrice\r\n    ) private {\r\n        address xw = xWallets[walletInfo[buyer].id].xWallet;\r\n        require(xw != address(0), \"No xWallet detected\");\r\n        if (_isStoreIdValid(storeId)) {\r\n            StoreData memory req = storeFront[storeId];\r\n            require(offerPrice >= req.priceLimit, \"OfferPrice too low\");\r\n            if (req.info.quantity >= amount) {\r\n                uint256 amtToPay;\r\n                uint fee = 1e17 wei;\r\n                unchecked {\r\n                    amtToPay = (amount * offerPrice) / 1 ether;\r\n                }\r\n                storeFront[storeId].info.quantity = req.info.quantity - amount;\r\n                require(\r\n                    IERC20(cUSD).balanceOf(xw) >= (amtToPay + fee),\r\n                    \"Insufficient bal in xw\"\r\n                );\r\n                require(\r\n                    IXWallet(xw).transferCUSD(req.seller, amtToPay, fee),\r\n                    \"XWallet: Transfer failed\"\r\n                );\r\n                if (!IERC20(req.asset).transfer(buyer, amount)) {\r\n                    revert AssetTransferFailed();\r\n                }\r\n            } else {\r\n                revert TokenBalanceInStoreTooLow();\r\n            }\r\n        } else {\r\n            revert InvalidStoreId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer purchases token\r\n     * @param storeId : Store Id\r\n     * @param amount : Quantity of token/coin to buy\r\n     * @param offerPrice : Price they're willing to offer. Note: Price must be greater than minimum listed price.\r\n     */\r\n    function buy(\r\n        uint storeId,\r\n        uint amount,\r\n        uint offerPrice\r\n    ) external validateStoreId(storeId) returns (bool) {\r\n        _makePurchase(storeId, amount, _msgSender(), offerPrice);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * See _setSupportedAsset\r\n     */\r\n    function setSupportedAsset(IERC20 _asset, uint8 category) public onlyOwner returns (bool) {\r\n        _setSupportedAsset(_asset, category);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsupport asset\r\n     * @param assetId : Asset Id\r\n     */\r\n    function unSupportAsset(\r\n        uint assetId\r\n    ) public onlyOwner validateAssetId(assetId) returns (bool) {\r\n        supportedAssets[assetId].isVerified = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Readonly: Return data from storage\r\n     */\r\n    function getData() public view returns(Storage memory stg) {\r\n            stg.stores = storeFront;\r\n            stg.supportedAssets = supportedAssets;\r\n            stg.xWallets = xWallets;\r\n        return stg;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}